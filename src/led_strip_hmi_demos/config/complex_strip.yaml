strips:
  front_strip:
    polygon:
      - [1.0, -0.5, 0.0]   # right end of strip
      - [1.1, -0.25, 0.0]
      - [1.3, -0.0, 0.0]
      - [1.1, 0.25, 0.0]
      - [1.0,  0.5, 0.0]   # left  end of strip
    num_leds: 50
  right_strip:
    polygon:
      - [-0.5, -0.5, 0.0]   # right end of strip
      - [0.0, -0.6, 0.0]
      - [0.5, -0.5, 0.0]   # left  end of strip
    num_leds: 10
  left_strip:
    polygon:
      - [0.5, 0.5, 0.0]   # right end of strip
      - [0.0, 0.6, 0.0]
      - [-0.5, 0.5, 0.0]   # left  end of strip
    num_leds: 10
  rear_strip:
    polygon: 
      - [-1.0, 0.5, 0.0]   # right end of strip
      - [-1.0,  -0.5, 0.0]   # left  end of strip
    num_leds: 20
strip_frame_id: "base_link" # frame of the LED strips
order: 
  - rear_strip
  - right_strip
  - front_strip
  - left_strip
physical_strip:
  - 0: [rear_strip, right_strip]
  - 1: [front_strip, left_strip]
closed: true # if true, the strips are connected to form a closed loop
virtual_perception:
  frame_id: "virtual_camera" # frame of the virtual camera for projecting the LED positions
  min_distance: 0.25    # minimum distance from detection to LED strip to be visualized
  max_distance: 5.0  # maximum distance from detection to LED strip to be visualized
  publish_transform: true # if true, the virtual camera tf will be published
  use_led_centroid_as_frame: true # if true, the virtual camera frame will be at the centroid of the LED strips
  offset:
    translation: [0.0, 0.0, 0.0] # translation offset of the virtual camera frame
    rotation: [0.0, 0.0, 0.0, 1.0] # rotation quaternion of the virtual camera frame




# strip0: 
# [(num_leds: 50, start: 0.0), (num_leds:0, start: 0.2), (num_leds: 10, start: 0.4), (num_leds: 20, start:0.8)]
